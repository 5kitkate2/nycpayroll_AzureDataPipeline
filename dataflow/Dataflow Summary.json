{
	"name": "Dataflow Summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sqldb_nycpayroll_2020",
						"type": "DatasetReference"
					},
					"name": "source2020payroll"
				},
				{
					"dataset": {
						"referenceName": "sqldb_nycpayroll_2021",
						"type": "DatasetReference"
					},
					"name": "source2021payroll"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sqldb_payroll_summary",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText_dirstaging",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "union"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "aggregate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2020payroll",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2021payroll",
				"select1, source2021payroll union(byName: true)~> union",
				"source2020payroll select(mapColumn(",
				"          FiscalYear,",
				"          PayrollNumber,",
				"          AgencyCode = AgencyID,",
				"          AgencyName,",
				"          EmployeeID,",
				"          LastName,",
				"          FirstName,",
				"          AgencyStartDate,",
				"          WorkLocationBorough,",
				"          TitleCode,",
				"          TitleDescription,",
				"          LeaveStatusasofJune30,",
				"          BaseSalary,",
				"          PayBasis,",
				"          RegularHours,",
				"          RegularGrossPaid,",
				"          OTHours,",
				"          TotalOTPaid,",
				"          TotalOtherPay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"union filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> filter",
				"filter derive(TotalPaid = RegularGrossPaid + TotalOTPaid+TotalOtherPay) ~> derivedColumn",
				"derivedColumn aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     {Total Payment} = sum(TotalPaid)) ~> aggregate",
				"aggregate sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid = {Total Payment}",
				"     )) ~> sink1",
				"aggregate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['dirstaging_summary.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}